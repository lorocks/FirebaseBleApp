def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion flutter.compileSdkVersion

//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.ble"
        minSdkVersion 19 //change to 21
        targetSdkVersion 32
        multiDexEnabled = true
//        ndk {
//            abiFilters 'armeabi-v7a', 'x86', 'armeabi'
//        }
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled false
        }
    }
}

flutter {
    source '../..'
}

//configurations {
//    implementation.exclude module:'proto-google-common-protos'
//    implementation.exclude module:'protolite-well-known-types'
//    implementation.exclude module:'protobuf-lite'
//}
//packagingOptions {
//    exclude 'META-INF/DEPENDENCIES'
//    exclude 'META-INF/plexus/components.xml'
//    exclude 'plugin.xml'
//}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    def firebase_config = '19.1.0'

//    implementation ("com.google.firebase:firebase-config:$firebase_config",{
//        // protobuf-lite that firebase-config and Tink depends on.
//        exclude group: 'com.google.protobuf',module: 'protobuf-javalite'
//        exclude group: 'com.google.protobuf',module: 'protobuf-lite'
//    })
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
//    protobuf 'com.google.protobuf:protobuf-java:3.7.1'
    implementation 'com.android.support:multidex:1.0.3'
}
